from pathlib import Path
import sys
path_root = Path(__file__).parents[4]
sys.path.append(str(path_root))


from myLib.build.lib.Datastructures.linear.SLL import SLL
from myLib.build.lib.Datastructures.linear.CSLL import CSLL
from myLib.build.lib.Datastructures.linear.DLL import DLL
from myLib.build.lib.Datastructures.linear.CDLL import CDLL
from myLib.build.lib.Datastructures.linear.QueueLL import QueueLL
from myLib.build.lib.Datastructures.linear.StackLL import StackLL

from myLib.build.lib.Datastructures.nodes.SNode import SNode
from myLib.build.lib.Datastructures.nodes.DNode import DNode

print("-------------------------TEST FOR SINGLE LINKED LIST DATA STRUCTURE-------------------------\n")
singlyLL = SLL(SNode(3))
singlyLL.Print()
singlyLL.InsertHead(SNode(2))
singlyLL.Print()
singlyLL.InsertTail(SNode(1))
singlyLL.Print()
print("\nDeleting head Node--")
singlyLL.DeleteHead()
singlyLL.Print()
print("\nDeleting tail Node--")
singlyLL.DeleteTail()
singlyLL.Print()
singlyLL.InsertHead(SNode(1))
singlyLL.Print()
singlyLL.InsertHead(SNode(6))
singlyLL.Print()
singlyLL.InsertTail(SNode(5))
singlyLL.Print()
singlyLL.InsertTail(SNode(2))
singlyLL.Print()
print("\nInserting a SNode(4) at position 3--")
singlyLL.Insert(SNode(4), 3)
singlyLL.Print()
print("\nDeleting a SNode(3) the list--")
singlyLL.Delete(SNode(3))
singlyLL.Print()
print("\nSorting the list--")
singlyLL.Sort()
singlyLL.Print()
print("\nSearch the list for SNode(6)--")
singlyLL.Search(SNode(6))
singlyLL.Print()
print("\nInserting at the head--")
singlyLL.InsertHead(SNode(1))
singlyLL.Print()
singlyLL.InsertHead(SNode(2))
singlyLL.Print()
singlyLL.InsertHead(SNode(15))
singlyLL.Print()
singlyLL.InsertHead(SNode(4))
singlyLL.Print()
singlyLL.InsertHead(SNode(5))
singlyLL.Print()
print("\nSorting the List and then inserting SNode(3)--")
singlyLL.SortedInsert(SNode(3))
singlyLL.Print()
print("\nClearing the list--")
singlyLL.Clear()
singlyLL.Print()
print("\nInserting at the tail--")
singlyLL.InsertTail(SNode(90))
singlyLL.Print()
singlyLL.InsertTail(SNode(87))
singlyLL.Print()
singlyLL.InsertTail(SNode(77))
singlyLL.Print()

print("\n-------------------------TEST FOR DOUBLE LINKED LIST DATA STRUCTURE-------------------------")
doublyLL = DLL(DNode(0))
doublyLL.Print()
doublyLL.InsertHead(DNode(2))
doublyLL.Print()
doublyLL.InsertTail(DNode(10))
doublyLL.Print()
doublyLL.InsertHead(DNode(71))
doublyLL.Print()
doublyLL.InsertTail(DNode(6))
doublyLL.Print()
print("\nDeleting head Node--")
doublyLL.DeleteHead()
doublyLL.Print()
doublyLL.DeleteHead()
doublyLL.Print()
print("\nDeleting tail Node--")
doublyLL.DeleteTail()
doublyLL.Print()
doublyLL.DeleteTail()
doublyLL.Print()
doublyLL.InsertHead(DNode(1))
doublyLL.Print()
doublyLL.InsertHead(DNode(6))
doublyLL.Print()
doublyLL.InsertTail(DNode(5))
doublyLL.Print()
doublyLL.InsertTail(DNode(2))
doublyLL.Print()
print("\nInserting a DNode(4) at position 2--")
doublyLL.Insert(DNode(4), 2)
doublyLL.Print()
print("\nDeleting a DNode(5) the list--")
doublyLL.Delete(DNode(5))
doublyLL.Print()
print("\nSorting the list--")
doublyLL.Sort()
doublyLL.Print()
doublyLL.InsertHead(DNode(1))
doublyLL.Print()
doublyLL.InsertHead(DNode(2))
doublyLL.Print()
doublyLL.InsertHead(DNode(15))
doublyLL.Print()
doublyLL.InsertHead(DNode(4))
doublyLL.Print()
doublyLL.InsertHead(DNode(5))
doublyLL.Print()
print("\nSearch the list for DNode(15)--")
doublyLL.Search(DNode(15))
print("\nSorting the List and then inserting DNode(3)--")
doublyLL.SortedInsert(DNode(3))
doublyLL.Print()
print("\nClearing the list--")
doublyLL.Clear()
doublyLL.Print()
print("\nInsert node at the head--")
doublyLL.InsertHead(DNode(15))
doublyLL.Print()
doublyLL.InsertHead(DNode(99))
doublyLL.Print()
print("\nInsert node at the tail--")
doublyLL.InsertTail(DNode(13))
doublyLL.Print()
doublyLL.InsertTail(DNode(101))
doublyLL.Print()

print("\n-------------------------TEST FOR CIRCULAR SINGLY LINKED LIST DATA STRUCTURE-------------------------")
singlyCLL = CSLL(SNode(12))
singlyCLL.Print()
print("\nInsert node at the head--")
singlyCLL.InsertHead(SNode(19))
singlyCLL.Print()
singlyCLL.InsertHead(SNode(4))
singlyCLL.Print()
singlyCLL.InsertHead(SNode(34))
singlyCLL.Print()
print("\nDelete node at the head--")
singlyCLL.DeleteHead()
singlyCLL.Print()
print("\nDeleting node at the tail--")
singlyCLL.DeleteTail()
singlyCLL.Print()
print("\nSearch the list for SNode(4)--")
singlyCLL.Search(SNode(4))
print("\nInsert SNode(77) at 1--")
singlyCLL.Insert(SNode(77), 1)
singlyCLL.Print()
singlyCLL.InsertHead(SNode(199))
singlyCLL.Print()
singlyCLL.InsertTail(SNode(338))
singlyCLL.Print()
singlyCLL.InsertHead(SNode(615))
singlyCLL.Print()
singlyCLL.InsertTail(SNode(22))
singlyCLL.Print()
print("\nSorting the list--")
singlyCLL.Sort()
singlyCLL.Print()
print("\nDeleting SNode(338)--")
singlyCLL.Delete(SNode(338))
singlyCLL.Print()
print("\nClearing the list--")
singlyCLL.Clear()
singlyCLL.Print()
print("\nInsert node at the tail--")
singlyCLL.InsertTail(SNode(290))
singlyCLL.Print()
singlyCLL.InsertTail(SNode(755))
singlyCLL.Print()
singlyCLL.InsertTail(SNode(11))
singlyCLL.Print()
print("\nSorting the List and then inserting SNode(40)--")
singlyCLL.SortedInsert(SNode(40))
singlyCLL.Print()

print("\n-------------------------TEST FOR CIRCULAR DOUBLY LINKED LIST DATA STRUCTURE-------------------------")
doublyCLL = CDLL(DNode(34))
doublyCLL.Print()
print("\nInsert node at the head--")
doublyCLL.InsertHead(DNode(210))
doublyCLL.Print()
doublyCLL.InsertHead(DNode(5))
doublyCLL.Print()
doublyCLL.InsertHead(DNode(56))
doublyCLL.Print()
print("\nDelete node at the head--")
doublyCLL.DeleteHead()
doublyCLL.Print()
print("\nDeleting node at the tail--")
doublyCLL.DeleteTail()
doublyCLL.Print()
print("\nSearch the list for DNode(5)--")
doublyCLL.Search(DNode(5))
print("\nInsert DNode(88) at 2--")
doublyCLL.Insert(DNode(88), 2)
doublyCLL.Print()
doublyCLL.InsertHead(DNode(2010))
doublyCLL.Print()
doublyCLL.InsertTail(DNode(449))
doublyCLL.Print()
doublyCLL.InsertHead(DNode(726))
doublyCLL.Print()
doublyCLL.InsertTail(DNode(33))
doublyCLL.Print()
print("\nSorting the list--")
doublyCLL.Sort()
doublyCLL.Print()
print("\nDeleting DNode(449)--")
doublyCLL.Delete(DNode(449))
doublyCLL.Print()
print("\nClearing the list--")
doublyCLL.Clear()
doublyCLL.Print()
print("\nInsert node at the tail--")
doublyCLL.InsertTail(DNode(310))
doublyCLL.Print()
doublyCLL.InsertTail(DNode(866))
doublyCLL.Print()
doublyCLL.InsertTail(DNode(22))
doublyCLL.Print()
print("\nSorting the List and then inserting DNode(51)--")
doublyCLL.SortedInsert(DNode(51))
doublyCLL.Print()

print("\n-------------------------TEST FOR STACK BASED ON SINGLY LINKED LIST DATA STRUCTURE-------------------------\n")
LLStack = StackLL()
print("\nPush the top of the stack--")
LLStack.push(SNode(1))
LLStack.Print()
LLStack.push(SNode(20))
LLStack.Print()
LLStack.push(SNode(13))
LLStack.Print()
LLStack.push(SNode(55))
LLStack.Print()
print("\nPeek of the stack--")
LLStack.peek()
print("\nSize of the stack--")
LLStack.size()
print("\nSearch SNode(13) of the stack--")
LLStack.Search(SNode(13))
print("\nPop the top of the stack--")
LLStack.pop()
LLStack.Print()
LLStack.pop()
LLStack.Print()
print("\nClear the stack--")
LLStack.Clear()
LLStack.Print()
print("\nCheck if the Stack is empty--")
LLStack.empty()
LLStack.push(SNode(90))
LLStack.Print()
print("\nCheck if the Stack is empty--")
LLStack.empty()

print("\n-------------------------TEST FOR QUEUE BASED ON SINGLY LINKED LIST DATA STRUCTURE-------------------------\n")
LLQueue = QueueLL()
print("\nEnqueue in a queue--")
LLQueue.enqueue(SNode(7))
LLQueue.Print()
LLQueue.enqueue(SNode(8))
LLQueue.Print()
LLQueue.enqueue(SNode(9))
LLQueue.Print()
LLQueue.enqueue(SNode(54))
LLQueue.Print()
LLQueue.enqueue(SNode(32))
LLQueue.Print()
print("\nPeek of the stack--")
LLQueue.peek()
print("\nSearch SNode(9) through the queue--")
LLQueue.Search(SNode(9))
print("\nThe size of the queue--")
LLQueue.size()
print("\nDequeue in a queue--")
LLQueue.dequeue()
LLQueue.Print()
LLQueue.dequeue()
LLQueue.Print()
print("\nClear a queue")
LLQueue.Clear()
LLQueue.Print()
print("\nCheck if the queue is empty--")
LLQueue.empty()
print()
LLQueue.enqueue(SNode(225))
LLQueue.Print()
print("\nCheck if the queue is empty--")
LLQueue.empty()
print()
print("\n-------------------------------------------------------------END-------------------------------------------------------------\n")